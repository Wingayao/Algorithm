/**
* 这是一个用java演示数组元素入栈和出栈的程序
* @author S
*
*/
public class StackApp {
    public static void main(String[] args) {
        // newStackX对象，并定义栈容量
        StackX theStack = new StackX(10);

        // 入栈
        theStack.push(20);
        theStack.push(40);
        theStack.push(55);
        theStack.push(35);

        // 出栈，并逐个输出显示
        while(!theStack.isEmpty()) {
            long value = theStack.pop();
            System.out.print(value);
            System.out.print(" ");
        }
        System.out.println(" ");
    }
}
//end class StackApp

/**
* 这个类中创建多种方法，实现栈操作的几个基本功能
* @author S
*
*/
public class StackX {
    /*
    * 此案例栈由数组实现，需先设定栈大小maxSize；
    * 若使用链表实现栈，就不需要先规定栈的容量
    * top指向栈顶元素位置，当空栈时，top指向-1
    */
    private int maxSize;
    private long[] stackArray;
    private int top;

    /**
    * 构造器，创建long类型的StackArray数组
    */
    public StackX(int s) {
        maxSize = s;
        stackArray = new long[maxSize];
        top = -1;
    }

    /**
    * top指向下一个数组索引位，即指向原栈顶数据项后一个位置，数据元素入栈
    */
    public void push(long j) {
        stackArray[++top] = j;
    }

    /**
    * 数组元素出栈，top指向上一数组索引位，即栈顶数据项前一个位置
    */
    public long pop() {
        return stackArray[top--];
    }

    /**
    * 查看栈顶元素
    */
    public long peek() {
        return stackArray[top];
    }

    /**
    * 判断是否空栈
    */
    public boolean isEmpty() {
        return (top == -1);
    }

    /**
    * 判断是否满栈
    */
    public boolean isFull() {
        return (top == maxSize -1);
    }
}
// end class StackX
